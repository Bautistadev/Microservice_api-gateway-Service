server.port=8080
spring.banner.location=classpath:custom-banner.txt
##================================================================================================================================================
            ##NOMBRE DEL SERVIDOR
spring.application.name=api-gateway-Service

##================================================================================================================================================
##          URL DEL SERVIDOR ADMINISTRADOR
spring.boot.admin.client.url=http://localhost:8081
spring.boot.admin.client.enabled=true
spring.boot.admin.client.auto-registration=true
spring.boot.admin.client.instance.name=API-GATEWAY-SERVICE
spring.boot.admin.client.username=admin
spring.boot.admin.client.password=admin

##================================================================================================================================================
#           Enlace con servidor de archivos properties
spring.cloud.config.uri=http://localhost:8888

##================================================================================================================================================
##          ARCHIVO DE PERFIL A CARGAR DEL SERVIDOR DE CONFIGURACION
spring.cloud.config.profile=Dev

##================================================================================================================================================
#           Usamos lista de microservicios de eureka
spring.cloud.gateway.discovery.locator.enabled=true

##================================================================================================================================================
#           Desabilitamos el balanceo de carga de netflix cloud
spring.cloud.loadbalancer.ribbon.enabled=false

##================================================================================================================================================
##          Instancia de eureka ID
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

##================================================================================================================================================
##          CONFIGURACION DE ENDPOINT DE ACTUATOR

##Esta configuración indica que todos los endpoints de gestión relacionados con la web deben estar expuestos,
# lo que significa que estarán disponibles para ser accedidos desde una interfaz web externa.
management.endpoints.web.exposure.include=*

##Similar al punto anterior, esta configuración especifica que todos los endpoints de gestión relacionados con JMX (Java Management Extensions)
# deben estar expuestos, lo que permite su acceso a través de herramientas de gestión JMX.
management.endpoints.jmx.exposure.include=*

##Habilita el endpoint de salud (/actuator/health por defecto) que proporciona información sobre el estado de la aplicación
management.endpoint.health.enabled=true

##Habilita el endpoint de apagado (/actuator/shutdown por defecto) que permite apagar la aplicación de manera segura.
management.endpoint.shutdown.enabled=true

##Habilita el endpoint de inicio (/actuator/startup por defecto) que proporciona información sobre el tiempo de inicio de la aplicación
management.endpoint.startup.enabled=true

##Habilita el endpoint de información (/actuator/info por defecto) que proporciona información general sobre la aplicación, como la versión.
management.endpoint.info.enabled=true

##Esta configuración indica que los endpoints de gestión estarán habilitados de forma predeterminada, lo que significa que no es
# necesario habilitarlos explícitamente en la configuración
management.endpoints.enabled-by-default=true

##Configura el nivel de detalle que se muestra en la respuesta del endpoint de salud.
# En este caso, "ALWAYS" indica que se deben mostrar siempre los detalles completos.
management.endpoint.health.show-details=ALWAYS

#habilitar la visibilidad de todos los datos: de lo contrario permanesen ocultos ******
management.endpoint.env.show-values=ALWAYS


##================================================================================================================================================
#           CONFIGURACION DE KEYCLOAK
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9095/realms/Shopping-MicroSevice
token_endpoint=http://localhost:9095/realms/Shopping-MicroSevice/protocol/openid-connect/token


#Realm name: Shopping-MicroSevice
#Client name: shopping-microservice-client
#Client secret: UfHKzsklr5jMmy7YuZ0i964n9TRoUqzC
#issuer:http://localhost:9095/realms/Shopping-MicroSevice

##================================================================================================================================================
##          ROUTING (Lista de microservicios)

##CLIENT SERVICE
spring.cloud.gateway.routes[0].id=client-Service
spring.cloud.gateway.routes[0].uri=lb://CLIENT-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/clients/**

##SHOPPING SERVICE
spring.cloud.gateway.routes[1].id=shopping-Service
spring.cloud.gateway.routes[1].uri=lb://SHOPPING-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/shopping/**

##PRODUCT SERVICE
spring.cloud.gateway.routes[2].id=product-Service
spring.cloud.gateway.routes[2].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/products/**

##================================================================================================================================================
##          ARCHIVOS DE LOG
logging.file.name=api-gateway-Service.log
logging.file.max-history=20
logging.file.max-size=20MB